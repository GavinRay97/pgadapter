options {
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
}

PARSER_BEGIN(Copy)

package com.google.cloud.spanner.pgadapter.parsers.copy;

public class Copy {

  public static void parse(String stmt) throws Exception {
    java.io.InputStream stmtStream = new java.io.ByteArrayInputStream(stmt.getBytes());
    Copy t = new Copy(stmtStream);
    try {
      ASTStart n = t.Start();
      CopyVisitor v = new CopyDumpVisitor();
      n.jjtAccept(v, null);
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
      throw e;
    }
  }

}

PARSER_END(Copy)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* KEYWORDS */
{
  <K_STDIN: "STDIN">
| <K_STDOUT: "STDOUT">
| <K_TO: "TO">
| <K_FROM: "FROM">
| <K_COPY: "COPY">
| <K_WITH: "WITH">
}

TOKEN : /* COPY OPTIONS */
{
  <O_BINARY: "BINARY">
| <O_CSV: "CSV">
| <O_FORMAT: "FORMAT">
| <O_FREEZE: "FREEZE">
| <O_DELIMITER: "DELIMITER">
| <O_NULL: "NULL">
| <O_HEADER: "HEADER">
| <O_QUOTE: "QUOTE">
| <O_ESCAPE: "ESCAPE">
| <O_FORCE_QUOTE: "FORCE_QUOTE">
| <O_FORCE_NOT_NULL: "FORCE_NOT_NULL">
| <O_FORCE_NULL: "FORCE_NULL">
| <O_ENCODING: "ENCODING">
}

TOKEN : /* SPECIAL_CHARACTERS */
{
    <K_COMMA: ",">
  | <K_COLON: ":">
  | <K_DOT: ".">
  | <K_TILDE: "~">
  | <K_QUOTE: "'">
  | <K_SLASH: "/">
}

TOKEN : /* IDENTIFIERS */
{
  < #DIGIT: ["0"-"9"] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #LOWER_CASE_LETTER: ["_","a"-"z"] >
|
  < #ID: <LETTER> (<LETTER>|<DIGIT>)*>
|
  < IDENTIFIER: (<K_QUOTE> <ID> <K_QUOTE> | <ID>)>
}

/** Main production. */
ASTStart Start() #Start : {}
{
  Expression() ";"
  { return jjtThis; }
}

/** An Expression. */
void Expression() : {}
{
  CopyStmt()
}

/** Copy Statement. */
void CopyStmt() : {}
{
  <K_COPY> qualifiedName() optColumnList() copyFrom() copyFileName() optWith() copyOptions()
}

/** Qualified Name. */
void qualifiedName() #QualifiedName : {}
{
  identifier()
}

/** Column List option. */
void optColumnList() : {}
{
  columnList()
  | {} /* EMPTY */
}

/** Column List. */
void columnList() #ColumnList : {}
{
    LOOKAHEAD(2)
    "(" columnList() ")"
  | LOOKAHEAD(2)
    columnElem() "," columnList()
  | columnElem()
}

/** Column Element. */
void columnElem() #ColumnElement :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

/** Copy From. */
void copyFrom() #CopyFrom : 
{
  Object o;
}
{
  <K_FROM>	{o = Boolean.TRUE;}
  | <K_TO>	{
      o = Boolean.FALSE;
      throw new ParseException("COPY TO is not supported.");
    }
}

void copyFileName() #Filename :
{
  Object o;
}
{
  <K_STDIN> {jjtThis.setName("STDIN");}
  | <K_STDOUT> {jjtThis.setName("STDOUT");}
  | identifier()
}

void optWith() : {}
{
  <K_WITH>
  | {} /* EMPTY */
}

void copyOptions() #CopyOptions : {}
{
  LOOKAHEAD(2)
  "(" copyOptionList() ")"
  | copyOptionList()
  | {} /* EMPTY */
}

void copyOptionList() #CopyOptionList : {}
{
  copyOptionElement() copyOptionList()
  | {} /* EMPTY */
}

void copyOptionElement() #CopyOptionElement : 
{
  Token t;
  Object o;
}
{
    <O_BINARY> {
      jjtThis.setName("BINARY");
    }
  | <O_CSV> {
      jjtThis.setName("CSV");
    }
  | <O_FREEZE> {
      jjtThis.setName("FREEZE");
      throw new ParseException("FREEZE is not supported.");
    }
  | <O_DELIMITER> identifier() {
      jjtThis.setName("DELIMITER");
    }
  | <O_NULL> identifier() {
      jjtThis.setName("NULL");
    }
  | <O_HEADER> {
      jjtThis.setName("HEADER");
    }
  | <O_QUOTE> identifier() {
      jjtThis.setName("QUOTE");
    }
  | <O_ESCAPE> identifier() {
      jjtThis.setName("ESCAPE");
    }
  | LOOKAHEAD(3)
    <O_FORCE_QUOTE> "(" columnList() ")" {
      jjtThis.setName("FORCE_QUOTE");
      throw new ParseException("FORCE_QUOTE is not supported.");
    }
  | LOOKAHEAD(3)
    <O_FORCE_NOT_NULL> "(" columnList() ")" {
      jjtThis.setName("FORCE_NOT_NULL");
      throw new ParseException("FORCE_NOT_NULL is not supported.");
    }
  | LOOKAHEAD(3)
    <O_FORCE_NULL> "(" columnList() ")" {
      jjtThis.setName("FORCE_NULL");
      throw new ParseException("FORCE_NULL is not supported.");
    }
  | <O_ENCODING> identifier() {
      jjtThis.setName("ENCODING");
      throw new ParseException("ENCODING is not supported.");
    }
}

/** An Identifier. */
void identifier() #ID :
{
  Token t;
  Object o;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

